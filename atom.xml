<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zdszx&#39;s blog</title>
  
  <subtitle>Hello</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zdszx.github.io/"/>
  <updated>2021-07-07T12:56:57.360Z</updated>
  <id>http://zdszx.github.io/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>H.264简介</title>
    <link href="http://zdszx.github.io/2021/07/03/H264/"/>
    <id>http://zdszx.github.io/2021/07/03/H264/</id>
    <published>2021-07-03T07:04:58.000Z</published>
    <updated>2021-07-07T12:56:57.360Z</updated>
    
    <content type="html"><![CDATA[<p>1.H.264简介</p><p>1.1 H.264标准概述</p><p>H.264也称为高级视频编码MPEG-4 AVC或MPEG-4 Part 10。视频编码属于后处理技术，因为从摄像机采集出来的数据十分庞大，不适合网络传输和存储，故需要对视频进行编码压缩，以达到低码率、高成像质量的目的。H.264文件是视频编解码器标准文件，以其压缩效率方面的优势和足够的灵活性而广为应用，到目前为止，它是视频内容的记录，压缩和分发的最常用格式，截至2019年9月，已有91％的视频行业开发人员使用了该格式。它支持高达8K的分辨率[1]。H264标准的卓越之处在于其宏块变体，以前的标准只能单独使用块4×4、8×8和16×16切分图像作帧间帧内编码，但是H264标准能使用多种不同的块大小。除此之外目前，该标准还应用于物联网[2]。</p><p>H264视频编码标准包含的编码算法[3]：</p><p>1) 帧间帧内预测，帧间即为多参考帧的时域数据压缩，帧内即为变尺寸块的空域数据</p><p>压缩[4]；</p><p>2) 变换编码，为了减少混叠并锐化图像，将空间域的图像信号变换到变换域或频率域的正交矢量空间中，用数字滤波器产生像素的亮度分量预测值，服务于帧间运动检测与图像质量呈现 [5]；</p><p>3) 熵编码，图像声音信号均为随机信号序列，故可以利用信息论原理减少数据冗余，主要有CABAC上下文自适应二进制算术编码,CAVLC上下文自适应二进制算术编码[6]；</p><p>4) 使用一个网络抽像层（NAL），进一步封装编码后的视频码流，使得相同的视频语法</p><p>可以适用于多种网络环境中。</p><p>1.2 H.264编码原理介绍</p><p>1.2.1 H.264编码方案总览</p><p>目标：1) 获得高视频压缩比；2) 具有良好的网络亲和性。对此，使用的解决方案为:</p><p>1) VLC 视频编码层；2) NAL 网络抽象层。</p><p>H.264字节流由 NALU（NAL Unit）组成，并且每个NALU可以被分类为VCL或非VCL。</p><p>1.2.2 VLC层和NAL层关系</p><p>VLC层是对核心算法引擎，块，宏块及片语法级别的定义，它输出由MPEG Part 10定义的H.264编码完的原始数据SODB(数据比特串)。原始字节序列有效负载（RBSP）是一种语法结构，包含封装在NAL单元中的整数个字节。如图1所示，在获得SODB之后，将添加等于1的尾随比特以指示SODB的末尾，该比特称为RBSP Stop bit，此外，RBSP始终按字节对齐，并且在停止位之后添加0位以变为8位对齐[7]。</p><p><img src="https://pic3.zhimg.com/80/v2-977ce4e56fef619bb8da4a1e6acb3bda_1440w.jpg" alt="img"></p><p>SODB_RBSP_EBSP_NALU关系</p><p>NAL层定义了片级以上的语法级别，比如针对于网络传输的序列参数集SPS和图像参数集PPS等。如图1所示，NAL层将SODB打包成RBSP，并且为了唯一保证起始码简化解码过程，会在RBSP尾零之后添加0x03，最后加上NAL头，就完成了一个NAL单元。</p><p>1.2.3 NAL Unit类型</p><p>进一步说，在H.264标准协议中规定了多种不同的NALU类型，其中两个极为重要的类型是SPS和PPS。 如图2所示，类型7就表示该个NALU内保存的数据为序列参数集Sequence Paramater Set(SPS),类型8表示该个NALU内保存的数据为图像参数集Picture Paramater Set(PPS)。通常情况下，PPS类似于SPS，在H.264的裸码流中单独保存在一个NAL Unit中。SPS中保存了一组编码视频序列Coded video sequence的全局参数 [8]。所谓的编码视频序列即原始视频的一帧一帧的像素数据经过编码之后的结构组成的序列，每一帧的编码后数据所依赖的参数保存于图像参数集（PPS）中[9]。SPS和PPS类型的NALU一般位于整个码流的起始位置，如果其中的数据丢失或出现错误，那么解码过程很可能会失败。</p><p><img src="/img/NALU.jpg" alt="img"></p><p>图2： NAL单元类型</p><p><strong>参考文献</strong></p><p>[1] Bitmovin. Video Develpler Report 2019．<a href="https://link.zhihu.com/?target=https%3A//go.bitmovin.com/video-developer-report-2019">Video Developer Report 2019</a></p><p>[2]A.Nurrohman and M. Abdurohman, “High Performance Streaming Based on H264 and Real Time Messaging Protocol (RTMP),” 2018 6th International Conference on Information and Communication Technology (ICoICT), Bandung, 2018, pp. 174-177.</p><p>[3] Grecos,C., Mingyuan Yang, A framework for fast mode decision in the H264 video coding standard,Digital Signal Processing, 2007,17(3):652-664.</p><p>[4] 代路伟,罗家融.H．264解码器中帧内预测模块的硬件设计[J].网络新媒体技术,2016(2):30-35.</p><p>[5] N.Belhadj, N. Bahri, M. Ali Ben Ayed, Z. Marrakchi and H. Mehrez, “Data level parallelism for H264/AVC baseline intra-prediction chain on MPSoC,” 10th International Multi-Conferences on Systems, Signals &amp; Devices 2013 (SSD13), Hammamet, 2013, pp. 1-4.</p><p>[6]何俊,田应洪,洪志良.基于H．264的熵编码结构[J].计算机工程,2008,34(6):229-232.</p><p>[7] Yumin Chan. Introduction to H.264:SODB vs RBSP vs EBSP &amp; NAL Unit.</p><p><a href="https://link.zhihu.com/?target=https%3A//yumichan.net/video-processing/video-compression">https://yumichan.net/video-processing/video-compression</a></p><p>[8] Jungheum Park, Sangjin Lee,Data fragment forensics for embedded DVR systems</p><p>Digital Investigation,Volume 11, Issue 3,2014,Pages 187-200</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.H.264简介&lt;/p&gt;
&lt;p&gt;1.1 H.264标准概述&lt;/p&gt;
&lt;p&gt;H.264也称为高级视频编码MPEG-4 AVC或MPEG-4 Part 10。视频编码属于后处理技术，因为从摄像机采集出来的数据十分庞大，不适合网络传输和存储，故需要对视频进行编码压缩，以达到低码
      
    
    </summary>
    
      <category term="音视频" scheme="http://zdszx.github.io/categories/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
    
      <category term="H264" scheme="http://zdszx.github.io/tags/H264/"/>
    
  </entry>
  
  <entry>
    <title>流媒体传输协议RTP与视频H264编码格式</title>
    <link href="http://zdszx.github.io/2021/07/02/hello_world/"/>
    <id>http://zdszx.github.io/2021/07/02/hello_world/</id>
    <published>2021-07-02T03:41:10.000Z</published>
    <updated>2021-07-07T12:59:29.133Z</updated>
    
    <content type="html"><![CDATA[<h2 id="流媒体传输协议RTP与视频H264编码格式"><a href="#流媒体传输协议RTP与视频H264编码格式" class="headerlink" title="流媒体传输协议RTP与视频H264编码格式"></a>流媒体传输协议RTP与视频H264编码格式</h2><p>RTP，即real-time transport protocol（实时传输协议），为实时传输交互的音频和视频提供了端到端传输服务,应用层协议。<br><span id="more"></span><br>其包括载荷的类型确认，序列编码，时间戳和传输监控功能。一般应用都是基于UDP协议，来使用RTP的多路技术以及验和服务。RTP可以比较容易的拓展以传递某些特定需要的内容，而且可以比较容易地集成进某个应用，而不是作为一个独立的补充层。所以RTP协议被故意地设计成不完整的协议框架。RTP还可以与其它适合的协议并用，如果底层网络支持多路分发，RTP还可以将数据传输给多个目标。 需要注意的是RTP不提供任何机制以保证数据的实时性和QOS(quality-of-service)，而是依赖底层的服务来提供这些功能。接收端可以利用RTP中的序列号排序收到的报文。RTP payload：RTP包中传输的数据，比如音频采样数据或者压缩过的视频数据。RTP packet：由定长RTP头部，数据来源者的列表，RTP payload组成的数据包。一些下层协议可能会自己定义RTP的封装格式。一般来说，一个下层协议包只包含一个RTP包，但是也有可能多个RTP包被合并到一起。<br>RTCP packet：RTP控制报文，由定长的RTC头部开始，之后会跟着一些结构化的元素，它们在RTCP发挥不同功能时，会有不同的结构。通常多个RTCP包会被合在一起，通过一个下层协议包一起发送。RTCP 发送者报告和接受者报告只描述了时序和序列号而不包含payload类型数据。<br>RTP session：一组参与者利用RTP来通讯的组合。一个参与者可以同时加入到多个RTP session中。在Multimedia session中，除非特意将多媒体编码进同一数据流，否则，每个数据流会通过不同的RTP Session传输。与会者通过Transport address来区分不同的RTP session。同一RTP session的不同与会者会共享同一个Transport address，也可能每个与会者都有自己的Transport address。在单播的情况时，一个与会者可能用同一对端口（RTP&amp;RTCP）来接受所有其他与会者的数据，也可能对不同的与会者采用不同的端口对（RTP&amp;RTCP）。<br>Synchronization source (SSRC)：RTP报文流的一个Source，由RTP头中定义的32-bit的SSRC identifier来标识，这样做是为了不依赖网络地址。同一个SSRC中发送的所有包都具有同一时序和序列号间隔，因此接收者可以通过SSRC将收到的数据包分组并排序。一个信号源（麦克风，摄像头，Mixer）的报文流会有由一个SSRC的发送器发送。一个SSRC可能会随着时间的变化，改变其数据格式，例如音频编码。SSRC的身份识别码都是随机生成的，但是必须保证整个RTP session中该身份识别码不会重复，这些工作是通过RTCP来完成的。如果一个与会者在一个RTP session中发送不同的媒体数据流，那么每个流的SSRC必须不同。<br>一个SSRC只有一个对应的时序和序列号，如果多个流有不同的时钟周期的话，就需要不同的时序。而且还不能用序列号来确认是哪个流丢包了RTP头的格式<img src="https://pic3.zhimg.com/80/v2-935c0d9e75deeac0b986ee58f52dec5e_1440w.jpg" alt="img">RTCP包格式<img src="https://pic3.zhimg.com/80/v2-20d0ea0b650c29cff5e426bc533398be_1440w.jpg" alt="img"><br>RTP控制协议同一个Session所有参与者会周期性地发送控制报文，RTP控制协议就是通过这种方式进行的，和RTP数据的传播一样采用了组播的机制。下层协议必须提供数据包和控制报文的多路复用功能，例如使用独立的UDP端口分别传输数据和控制报文。<br>RTCP协议具有如下四大功能：<br>\1. 最主要的功能是反馈数据分发的质量。这也是RTP作为一个传输协议来说最关键的功能，而且它和流量控制，拥塞控制息息相关。反馈信息可能会直接影响自适应编码的控制。发送反馈报告给所有的参与者可以让它们评估遇到的数据分发问题是个人问题还是全局问题。<br>\2. RTCP还会给每个RTP source带一个不变的传输层身份识别符（CNAME），因为SSRC可能会中途改变（程序重启），所以接受者需要这个CNAME来持续追踪每个与会者。而且，接受者可以通过CNAME来将同一个与会者的所有数据流联系在一起，比如同步音频和视频。<br>\3. 因为前两个功能需要所有的与会者都发送RTCP报文，所以需要适当的控制报文发送的频率以至于RTP协议可以在大量客户端一同加入时也能正常工作。通过每个参与者都广播控制报文的方式，每个人都能独立地计算出参与者的总数怎么在TCP/UDP基础上继续魔改？从RTP看去1.RTP的设计理念是它要能根据session参与者的人数增加而进行自适应处理。例如，音频会议中同一时刻说话的一般也就那么一两个人（这就从内部限制了音频数据的传输），那么可以认为组播数据分发所用到的带宽资源和与会人数无关。控制信息的发送和音频数据的传输不同，每个人都会不停的发送RTCP报文，如果每个参与者的接受报告以同一个周期发送的话，RTCP报文传输所消耗的资源会随着与会人数的增加而线性增加。因此，当与会人数增加时，RTCP报文的发送间隔应该相应的动态地增大。 对每个session来说，会有一个总的带宽限制（Session bandwidth），它会被分配给每个独立的与会者。整个网络的带宽可能会有所保留，并从网络层面强制限制Session的带宽。2.发送间隔计算<br>RTCP的发送间隔需要随着Session总人数的变化而适当的缩放。结合上述的部分状态，我们按如下方式计算RTCP报文间隔： 1. 如果媒体流发送者的数量小于总人数的25%时，这个间隔和当前节点是否是媒体流发送者有关（通过WE_Sent判断）。如果是媒体流发送者，计算公式为：Senders <em> AVG_RTCP_Size / (25% </em> RTCP_BW)，如果是媒体流的接收者，计算公式为：（Members - Senders）<em> AVG_RTCP_Size / (75% </em> RTCP_BW)。当媒体流发送者的数量超过25%时，发送者和接受者会被同等对待，即它们的RTCP周期公式为：Members * AVG_RTCP_Size / RTCP_BW。3.拥塞控制<br>所有的网络传输协议都需要拥塞控制，RTP也不例外，但是因为RTP的数据传输不会发生特别大的激变（固定频率发送，控制了带宽），所以RTP的拥塞控制会和TCP这类的实现有很大差别，RTP不会像TCP那样占用所有带宽。RTP的这种数据传输模式虽然降低了拥塞的风险，但是一旦发生了拥塞，也不能莽莽地减少网络负载。 因为RTP面向的是各种各样的上层应用，没有一个拥塞控制机制能适用于所有的情况。因此，拥塞控制部分应该定义在预设中，或者上层应用中。在有些预设中，会根据RTCP的反馈来适当的调整数据传输带宽。4.保密性<br>保密性是指我们的报文只希望一些特定的接受者可以解码成明文，而其他人只能得到无用的信息，保密性是通过加密编码来提供的。 当需要为RTP和RTCP报文提供加密服务时，所有传输的内容都会在下层报文那里进行加密。对于RTCP来说，需要一个32-bit的随机数作为前缀。而RTP报文不需要前缀，取而代之的是随机序列号和时间戳偏移。前面提到过也可以用IP级的加密方案或者RTP级的加密。一些预设可能会定义别的payload类型来加密，这种方案，可能只加密payload部分而头部分使用明文，因为只有payload部分才是应用真正需要的内容。这可能对硬件设备来说非常有用，它即处理解密过程，又处理解码过程。<img src="/img/HyperbolicAnimation.gif" alt="加载没(⊙o⊙)？"><!--more--></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;流媒体传输协议RTP与视频H264编码格式&quot;&gt;&lt;a href=&quot;#流媒体传输协议RTP与视频H264编码格式&quot; class=&quot;headerlink&quot; title=&quot;流媒体传输协议RTP与视频H264编码格式&quot;&gt;&lt;/a&gt;流媒体传输协议RTP与视频H264编码格式&lt;/h2&gt;&lt;p&gt;RTP，即real-time transport protocol（实时传输协议），为实时传输交互的音频和视频提供了端到端传输服务,应用层协议。&lt;br&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://zdszx.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="流媒体传输" scheme="http://zdszx.github.io/tags/%E6%B5%81%E5%AA%92%E4%BD%93%E4%BC%A0%E8%BE%93/"/>
    
  </entry>
  
  <entry>
    <title>Boy Next Door♂</title>
    <link href="http://zdszx.github.io/2021/07/02/lxd/"/>
    <id>http://zdszx.github.io/2021/07/02/lxd/</id>
    <published>2021-07-02T03:41:10.000Z</published>
    <updated>2021-07-06T12:13:56.678Z</updated>
    
    <content type="html"><![CDATA[<p>罗旭东 帅因何而发生？ 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 经过上述讨论， 洛克在不经意间这样说过，学到很多东西的诀窍，就是一下子不要学很多。这句话语虽然很短，但令我浮想联翩。 生活中，若罗旭东 帅出现了，我们就不得不考虑它出现了的事实。 孔子在不经意间这样说过，知之者不如好之者，好之者不如乐之者。这不禁令我深思。 这样看来， 经过上述讨论， 带着这些问题，我们来审视一下罗旭东 帅。 黑格尔曾经提到过，只有永远躺在泥坑里的人，才不会再掉进坑里。这似乎解答了我的疑惑。 生活中，若罗旭东 帅出现了，我们就不得不考虑它出现了的事实。 可是，即使是这样，罗旭东 帅的出现仍然代表了一定的意义。 我们都知道，只要有意义，那么就必须慎重考虑。 鲁巴金说过一句富有哲理的话，读书是在别人思想的帮助下，建立起自己的思想。我希望诸位也能好好地体会这句话。 可是，即使是这样，罗旭东 帅的出现仍然代表了一定的意义。 而这些并不是完全重要，更加重要的问题是， 一般来讲，我们都必须务必慎重的考虑考虑。 就我个人来说，罗旭东 帅对我的意义，不能不说非常重大。<br><img src="/img/IMG_20210629_110224.png" alt="diao (⊙o⊙)？"></p><span id="more"></span><p>后面的内容在首页不显示，只显示到<!--more-->这里</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;罗旭东 帅因何而发生？ 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 经过上述讨论， 洛克在不经意间这样说过，学到很多东西的诀窍，就是一下子不要学很多。这句话语虽然很短，但令我浮想联翩。 生活中，若罗旭东 帅出现了，我们就不得不考虑它出现了的事实。 孔子在不经意间这样说过，知之者不如好之者，好之者不如乐之者。这不禁令我深思。 这样看来， 经过上述讨论， 带着这些问题，我们来审视一下罗旭东 帅。 黑格尔曾经提到过，只有永远躺在泥坑里的人，才不会再掉进坑里。这似乎解答了我的疑惑。 生活中，若罗旭东 帅出现了，我们就不得不考虑它出现了的事实。 可是，即使是这样，罗旭东 帅的出现仍然代表了一定的意义。 我们都知道，只要有意义，那么就必须慎重考虑。 鲁巴金说过一句富有哲理的话，读书是在别人思想的帮助下，建立起自己的思想。我希望诸位也能好好地体会这句话。 可是，即使是这样，罗旭东 帅的出现仍然代表了一定的意义。 而这些并不是完全重要，更加重要的问题是， 一般来讲，我们都必须务必慎重的考虑考虑。 就我个人来说，罗旭东 帅对我的意义，不能不说非常重大。&lt;br&gt;&lt;img src=&quot;/img/IMG_20210629_110224.png&quot; alt=&quot;diao (⊙o⊙)？&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="diu" scheme="http://zdszx.github.io/categories/diu/"/>
    
    
      <category term="博客" scheme="http://zdszx.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="hexo" scheme="http://zdszx.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
